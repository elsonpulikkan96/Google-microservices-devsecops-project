pipeline {
    agent any

    tools {
        // Python already installed via system packages
        jdk 'jdk17'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        DOCKER_NAME  = 'elsonpulikkan/recommendationservice'
        IMAGE_NAME   = 'recommendationservice'
        PATH = "$PATH:/var/lib/jenkins/.local/bin"   // <-- Fix: add pip install path
    }

    stages {
        stage("Clean Workspace") {
            steps { cleanWs() }
        }

        stage("Git Checkout") {
            steps {
                git branch: 'main', url: 'https://github.com/elsonpulikkan96/Google-microservices-devsecops-project.git'
            }
        }

        // --- SAST: Bandit ---
        stage("Bandit Security Scan") {
            steps {
                dir('src/recommendationservice') {
                    sh """
                      bash -lc '
                        set -euo pipefail

                        # create venv in workspace (idempotent)
                        if [ ! -d ".venv" ]; then
                          python3 -m venv .venv
                        fi

                        # use venv pip / python
                        . .venv/bin/activate
                        .venv/bin/pip install --upgrade pip setuptools wheel

                        # install bandit and run scan
                        .venv/bin/pip install --no-cache-dir bandit
                        .venv/bin/bandit -r . -f json -o bandit-report.json || true
                        .venv/bin/bandit -r . -f html -o bandit-report.html || true

                        # copy reports to workspace root so email attachments work
                        cp -f bandit-report.json ${WORKSPACE}/bandit-report.json || true
                        cp -f bandit-report.html ${WORKSPACE}/bandit-report.html || true
                      '
                    """
                }
            }
            post {
                always {
                    archiveArtifacts 'src/recommendationservice/bandit-report.json'
                }
            }
        }

        // --- SAST: SonarQube ---
        stage("SonarQube Analysis") {
            steps {
                dir('src/recommendationservice') {
                    withSonarQubeEnv('sonar-server') {
                        sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                          -Dsonar.projectKey=recommendationservice \
                          -Dsonar.projectName=recommendationservice \
                          -Dsonar.sources=. \
                          -Dsonar.language=py
                        '''
                    }
                }
            }
        }

        stage("Quality Gate") {
            steps {
                script {
                    timeout(time: 3, unit: 'MINUTES') {
                        waitForQualityGate abortPipeline: true, credentialsId: 'sonar-token'
                    }
                }
            }
        }

        // --- Install Dependencies ---
        stage("Install Dependencies") {
            steps {
                dir('src/recommendationservice') {
                    sh """
                      bash -lc '
                        set -euo pipefail

                        if [ ! -d ".venv" ]; then
                          python3 -m venv .venv
                        fi
                        . .venv/bin/activate
                        .venv/bin/pip install --upgrade pip

                        if [ -f requirements.txt ]; then
                          .venv/bin/pip install --no-cache-dir -r requirements.txt || true
                        fi

                        # ensure bandit report (if generated earlier) is present at workspace root for email attachments
                        if [ -f bandit-report.json ]; then
                          cp -f bandit-report.json ${WORKSPACE}/bandit-report.json || true
                        fi
                      '
                    """
                }
            }
        }

        // --- Dependency Scan (Safety) ---
        stage("Safety Dependency Scan") {
            steps {
                dir('src/recommendationservice') {
                    sh """
                      bash -lc '
                        set -euo pipefail

                        if [ ! -d ".venv" ]; then
                          python3 -m venv .venv
                        fi
                        . .venv/bin/activate
                        .venv/bin/pip install --upgrade pip
                        .venv/bin/pip install --no-cache-dir safety || true

                        .venv/bin/python -m safety check --full-report --output json > safety-report.json || true

                        # copy to workspace root so attachmentsPattern 'safety-report.json' works
                        cp -f safety-report.json ${WORKSPACE}/safety-report.json || true
                      '
                    """
                }
            }
            post {
                always {
                    archiveArtifacts 'src/recommendationservice/safety-report.json'
                }
            }
        }

        // --- Trivy FS Scan ---
        stage("Trivy File Scan") {
            steps {
                dir('src/recommendationservice') {
                    sh 'trivy fs . --severity CRITICAL,HIGH --exit-code 1 --scanners vuln,misconfig,secret > trivy-fs-report.txt || true'
                }
            }
            post {
                always {
                    archiveArtifacts 'src/recommendationservice/trivy-fs-report.txt'
                }
            }
        }

        // --- Build Docker Image ---
        stage("Build Docker Image") {
            steps {
                dir('src/recommendationservice') {
                    script {
                        env.IMAGE_TAG = "${DOCKER_NAME}:${BUILD_NUMBER}"
                        sh "docker rmi -f ${IMAGE_NAME} ${env.IMAGE_TAG} || true"
                        sh "docker build -t ${IMAGE_NAME} ."
                        sh "docker tag ${IMAGE_NAME} ${env.IMAGE_TAG}"
                    }
                }
            }
        }

        // --- Push Docker Image ---
        stage("Push to DockerHub") {
            steps {
                dir('src/recommendationservice') {
                    withCredentials([string(credentialsId: 'docker-cred', variable: 'dockerpwd')]) {
                        sh '''
                        docker login -u elsonpulikkan -p ${dockerpwd}
                        docker push ${IMAGE_TAG}
                        docker tag ${IMAGE_NAME} ${DOCKER_NAME}:latest
                        docker push ${DOCKER_NAME}:latest
                        '''
                    }
                }
            }
        }

        // --- Trivy Image Scan ---
        stage("Trivy Scan Image") {
            steps {
                dir('src/recommendationservice') {
                    sh '''
                    trivy image -f json -o trivy-image-recommendation.json ${IMAGE_TAG} || true
                    trivy image -f table -o trivy-image-recommendation.txt ${IMAGE_TAG} || true

                    # copy to workspace root for attachments (if needed)
                    cp -f trivy-image-recommendation.json ${WORKSPACE}/trivy-image-recommendation.json || true
                    cp -f trivy-image-recommendation.txt ${WORKSPACE}/trivy-image-recommendation.txt || true
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts 'src/recommendationservice/trivy-image-recommendation.*'
                }
            }
        }
    }

    // --- Final Notifications ---
    post {
        always {
            dir('src/recommendationservice') {
                script {
                    def buildStatus = currentBuild.currentResult
                    def buildUser = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')[0]?.userId ?: ' Github User'

                    emailext (
                        subject: "Pipeline ${buildStatus}: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                        body: """
                            <p>recommendationservice Google-Shop DevSecOps pipeline status.</p>
                            <p>Github Link :- https://github.com/elsonpulikkan96/ </p>
                            <p>Live Website: https://store.elsondevops.cloud/</p>
			    <p>Project: ${env.JOB_NAME}</p>
                            <p>Build Number: ${env.BUILD_NUMBER}</p>
                            <p>Build Status: ${buildStatus}</p>
                            <p>Started by: ${buildUser}</p>
                            <p>Build URL: <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
                        """,
                        to: 'elsonpulikkan@gmail.com',
                        from: 'elsonpulikkan@gmail.com',
                        mimeType: 'text/html',
                        attachmentsPattern: 'bandit-report.json,safety-report.json,trivy-fs-report.txt,trivy-image-recommendation.json,trivy-image-recommendation.txt'
                    )
                }
            }
        }
    }
}
